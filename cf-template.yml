AWSTemplateFormatVersion: 2010-09-09
Parameters:
  GithubOwner:
    Type: String
    Default: philipandresen
  GithubRepo:
    Type: String
    Default: maine-wildlife
  GithubOAuthToken:
    Type: String
    Description: Github personal access token
  SSLCertificateARN:
    Type: String
    Description: The ARN of the AWS ACM SSL Certificate that authorizes the use of the MaineWildlife domain.
Resources:
  PipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties: {}
  DeployBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt
                    - PipelineBucket
                    - Arn
                  - !Join
                    - ''
                    - - !GetAtt
                        - PipelineBucket
                        - Arn
                      - /*
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource:
                  - !GetAtt
                    - DeployBucket
                    - Arn
                  - !Join
                    - ''
                    - - !GetAtt
                        - DeployBucket
                        - Arn
                      - /*
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'cloudfront:CreateInvalidation'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                Resource:
                  - '*'
    DependsOn:
      - DeployBucket
      - PipelineBucket
  PipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt
                    - PipelineBucket
                    - Arn
                  - !Join
                    - ''
                    - - !GetAtt
                        - PipelineBucket
                        - Arn
                      - /*
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
    DependsOn:
      - PipelineBucket
  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-CodeBuild'
      ServiceRole: !GetAtt
        - CodeBuildRole
        - Arn
      Artifacts:
        Type: CODEPIPELINE
        Name: MaineWildlifeCodePipelineArtifact
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/standard:2.0'
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.1
          phases:
            pre_build:
              commands:
                - echo Installing source NPM dependencies...
                - npm install
            build:
              commands:
                - echo Build started on `date`
                - npm run build
            post_build:
              commands:
                - aws s3 cp --recursive --acl public-read ./build s3://${DeployBucket}/
                - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/service-worker.js s3://${DeployBucket}/
                - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${DeployBucket}/
                - aws cloudfront create-invalidation --distribution-id ${CloudFrontDistribution} --paths /index.html /service-worker.js
          artifacts:
            files:
              - '**/*'
            base-directory: build
    DependsOn:
      - DeployBucket
      - PipelineBucket
      - CodeBuildRole
  CodePipelineProject:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt
        - PipelineRole
        - Arn
      ArtifactStore:
        Location: !Ref PipelineBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: MaineWildlife
              Configuration:
                Owner: !Ref GithubOwner
                Repo: !Ref GithubRepo
                Branch: master
                OAuthToken: !Ref GithubOAuthToken
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: MaineWildlife
              OutputArtifacts:
                - Name: MaineWildlifeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
    DependsOn:
      - CodeBuildProject
      - PipelineBucket
      - PipelineRole
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: >-
          Origin access identity to ensure resources are accessibly only from cloudfront
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt
              - DeployBucket
              - DomainName
            Id: !Ref DeployBucket
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref CloudFrontOriginAccessIdentity
        DefaultRootObject: index.html
        Enabled: true
        DefaultCacheBehavior:
          MinTTL: 86400
          MaxTTL: 31536000
          ForwardedValues:
            QueryString: true
          TargetOriginId: !Ref DeployBucket
          ViewerProtocolPolicy: redirect-to-https
        # Aliases and ACM certificateArn are used to map our pre-existing route 53 domain to our cloudfront distro.
        Aliases:
          - 'www.mainewildlife.org'
          - 'mainewildlife.org'
        ViewerCertificate:
          SslSupportMethod: 'sni-only'
          AcmCertificateArn: !Ref SSLCertificateARN
        # Since this is a single page application, we redirect 404s to index.html and let react router handle it.
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
    DependsOn:
      - DeployBucket
